# reviewed: []
# verified: []
ggplot(data = SCFixRate) + geom_histogram(aes(x = SCFixRate$leagueID), stat="count") + labs(title = "Number of Observations in Analysis: StarCraft II Fixation Rate") +
labs(x="League", y="Count")
ggsave('../figures/SCFixRateHist.pdf', width = 7, height = 5, units = c("in"))
### Bootstrap Tukey
# reviewed by Caitlyn [Jun 19 2019]
set.seed(1) # to make sampling reproducible
library(dplyr)
#drop league 7
ToRemove=which(SCFixRate$leagueID=='7')
ultraTabViable=SCFixRate[-ToRemove,]
ultraTabViable$leagueID=droplevels(ultraTabViable$leagueID)
#should = 167 for the skilldependencemastertable
nSmallest = min(summary(data$leagueidx))
#set number of samples
Replications=50
#initialize, choose(6,2) = 15 rows
output=matrix(, nrow = 15, ncol = Replications)
for (i in 1:Replications){
#subsample
new_data <- data %>% group_by(leagueidx) %>% sample_n(nSmallestGroup, replace=FALSE)
new_data=data.frame(new_data)
#aov and tukey
Anova=aov(new_data[,colNum]~new_data$leagueidx)
TUKEY=TukeyHSD(Anova,ordered = TRUE)$`new_data$leagueidx`[,4]
#TUKEY=TukeyHSD(Anova)$`new_data$leagueidx`[,4]
#record pvalues
output[1:length(TUKEY),i]=TUKEY
#### Debug Code: Comment out all of this to run this script for real ####
#unequalvariancetest=bartlett.test(new_data[,colNum]~new_data$leagueidx)
#boxplot(new_data[,colNum]~new_data$leagueidx, main=unequalvariancetest)
#readline(prompt="Joe's Dirty Debugger Activated [enter] to continue [esc] to abord")
#### Debug Code part 2: Use this to run TukeyFoundationANOVA outside of a function for PACDur ####
#new_data=data
#colNum=1
#nSmallestGroup=100
}
#mean pvalues, and produce output
RowMEANZ=rowMeans(output)
FinalOutput=data.frame(as.factor(row.names(TukeyHSD(Anova)$`new_data$leagueidx`)),RowMEANZ, RowMEANZ<0.05)
names(FinalOutput)=c('Comparison','Mean PValue', 'significant')
FinalOutput
View(ultraTabViable)
" Author: Robin C. A. Barrett, Caitlyn McColeman
Date Created: 15 Feb, 2018
Last Edit: 19 Mar, 2018 - [C.M.] made public friendly, added eyetracking analysis and prepared for GitHub export
Cognitive Science Lab, Simon Fraser University
Originally Created For: StarTrak
Reviewed: [Kat]
Verified: [Yue 2018/7/26 Using gramm in Matlab to plot the same data. They look very much the same as plots produced by this R file.]
INPUT:
OUTPUT:
Additional Scripts Used: requires that FixationRate_BarGraphsByLeague.m was run in MATLAB. Or that its output is available in the ../data folder (EyeTrackFixRate.csv, SC2FixRate.csv)
"
require('psych')
require('reshape')
require('lsr')
require('ez')
require('ggplot2')
# move to this directory, and use it as a reference point to find the data folder
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
setwd('../data/') # move up and into data folder
#################### StarCraft2 data ####################
SCFixRate = read.table('SC2FixRate.csv', header = FALSE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
# Specify that the League Column is a Factor
SCFixRate$leagueID = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
fixRateImg = ggplot(SCFixRate, aes(SCFixRate$leagueID,fixRate))
fixRateImg = fixRateImg + geom_jitter(height = 0, width = 0.2, alpha = .1)
fixRateImg = fixRateImg + theme_bw() + theme(text = element_text(size=25), panel.grid.major = element_blank(), plot.title = element_text(size=25))
fixRateImg = fixRateImg + geom_violin(alpha = .15, fill = "#C0C0C0", colour = "#C0C0C0")
fixRateImg = fixRateImg + labs(x = "League")
fixRateImg = fixRateImg + labs(y = "PAC/Fixation Rate") # changed this label from "PAC, Fixation Rate..." -KD
fixRateImg = fixRateImg + ggtitle('PAC/Fixation Rate by League') # changed from "PAC + Fixation Rate" -KD
ggsave('../figures/SCFixRateImg.pdf', width = 7, height = 5, units = c("in"))
kresult=kruskal.test(SCFixRate$fixRate~SCFixRate$leagueID)
diffBetwenSilverAndMaster = wilcox.test(SCFixRate$fixRate[SCFixRate$leagueID == 2],SCFixRate$fixRate[SCFixRate$leagueID == 6])
# get effect size, as per TOMCZAK & TOMCZAK (2014) http://www.tss.awf.poznan.pl/files/3_Trends_Vol21_2014__no1_20.pdf
H = kresult$statistic
k = kresult$parameter + 1
n = length(unique(SCFixRate$gameIDRecord));
etaSq = (H - k + 1)/(n-k)
# 2b. Determine the difference between the "novice-ish" and the "expert-ish" toward the opposite end of the possible league
diffBetwenSilverAndMaster = wilcox.test(SCFixRate$fixRate[SCFixRate$leagueID == 2],SCFixRate$fixRate[SCFixRate$leagueID == 6])
effSizeR = sqrt(diffBetwenSilverAndMaster$statistic)/(length(unique(SCFixRate$gameIDRecord[SCFixRate$leagueID == 2])) + length(unique(SCFixRate$gameIDRecord[SCFixRate$league==6])))
# 3. mark's idea to look at bronze vs. subsequent leagues; based on pairwise test from fixRateAnalysis.R. Helpful for more typical learning curve distributions too.
# note: we use a family-wise error correction of .05/6 = 0.008 to reject the null hypothesis that the two samples are drawn from the same population.
bronzeVsLater = data.frame()
for (leagueNum in 2:7){
# t-test
pairCompare = t.test(SCFixRate$fixRate[SCFixRate$leagueID == 1],SCFixRate$fixRate[SCFixRate$leagueID == leagueNum])
bronzeVsLater[leagueNum-1,1]=pairCompare$statistic
bronzeVsLater[leagueNum-1,2]=pairCompare$parameter
bronzeVsLater[leagueNum-1,3]=pairCompare$p.value
# effect size
bronzeVsLater[leagueNum-1,4] = cohensD(SCFixRate$fixRate[SCFixRate$leagueID == 1],SCFixRate$fixRate[SCFixRate$leagueID == leagueNum])
}
#################### EyeTracking data ####################
ETFixRate = read.table('EyeTrackFixRate.csv', header = TRUE, sep = ",")
names(ETFixRate) <- c("participantID", "fixRateFirst2", "fixRateLast2")
# the formatting is different for the eye tracking data. reshape it so it's long format.
ETFixRateLong <- melt(ETFixRate, id=c("participantID"))
names(ETFixRateLong) <- c("participantID", "whichTrials", "fixationRate")
ETFixRateImg = ggplot(ETFixRateLong, aes(ETFixRateLong$whichTrials,ETFixRateLong$fixationRate))
ETFixRateImg = ETFixRateImg + geom_jitter(height = 0, width = 0.2, alpha = .1)
ETFixRateImg = ETFixRateImg + theme_bw() + theme(text = element_text(size=25), panel.grid.major = element_blank(), plot.title = element_text(size=25))
ETFixRateImg = ETFixRateImg + geom_violin(alpha = .15, fill = "#C0C0C0", colour = "#C0C0C0")
ETFixRateImg = ETFixRateImg + labs(x = "Temporal Range (mins)")
ETFixRateImg = ETFixRateImg + labs(y = "Fixation Rate")
ETFixRateImg = ETFixRateImg + ggtitle('Eye Fixation Rate: First, Last Minutes')
ETFixRateImg = ETFixRateImg + scale_x_discrete(labels=c("fixRateFirst2" = "First 2", "fixRateLast2" = "Last 2"))
ggsave('../figures/ETFixRateImg.pdf', width = 7, height = 5, units = c("in"))
kresultET = kruskal.test(ETFixRateLong$fixationRate~ETFixRateLong$whichTrials)
diffBetwenFirstAndLastET = wilcox.test(ETFixRateLong$fixationRate[ETFixRateLong$whichTrials == "fixRateFirst2"], ETFixRateLong$fixationRate[ETFixRateLong$whichTrials == "fixRateLast2"])
effSizeR = sqrt(diffBetwenFirstAndLastET$statistic)/length(unique(ETFixRateLong$participantID))*2
# get effect size, as per TOMCZAK & TOMCZAK (2014) http://www.tss.awf.poznan.pl/files/3_Trends_Vol21_2014__no1_20.pdf
HET = kresultET$statistic
kET = kresultET$parameter + 1
nET = length(unique(ETFixRateLong$participantID));
etaSqET = (HET - kET + 1)/(nET-kET)
## in response to reviewer request, a histogram of the number of observations that went into analysis.
# reviewed: []
# verified: []
ggplot(data = SCFixRate) + geom_histogram(aes(x = SCFixRate$leagueID), stat="count") + labs(title = "Number of Observations in Analysis: StarCraft II Fixation Rate") +
labs(x="League", y="Count")
ggsave('../figures/SCFixRateHist.pdf', width = 7, height = 5, units = c("in"))
### Bootstrap Tukey
# reviewed by Caitlyn [Jun 19 2019]
set.seed(1) # to make sampling reproducible
library(dplyr)
#drop league 7
ToRemove=which(SCFixRate$leagueID=='7')
ultraTabViable=SCFixRate[-ToRemove,]
ultraTabViable$leagueID=droplevels(ultraTabViable$leagueID)
#set number of samples
Replications=50
#initialize
output=matrix(, nrow = 15, ncol = Replications)
for (i in 1:Replications){
#subsample
new_data <- ultraTabViable %>% group_by(leagueID) %>% sample_n(167, replace=TRUE)
#aov and tukey
Anova=aov(new_data$fixRate~new_data$leagueID)
TUKEY=TukeyHSD(Anova)$`new_data$leagueID`[,4]
#record pvalues
output[1:length(TUKEY),i]=TUKEY
}
#mean pvalues, and produce output
RowMEANZ=rowMeans(output)
FinalOutput=data.frame(as.factor(row.names(TukeyHSD(Anova)$`new_data$leagueID`)),RowMEANZ)
names(FinalOutput)=c('Comparison','Mean PValue')
FinalOutput
View(SCFixRate)
" Author: Robin C. A. Barrett, Caitlyn McColeman
Date Created: 15 Feb, 2018
Last Edit: 19 Mar, 2018 - [C.M.] made public friendly, added eyetracking analysis and prepared for GitHub export
Cognitive Science Lab, Simon Fraser University
Originally Created For: StarTrak
Reviewed: [Kat]
Verified: [Yue 2018/7/26 Using gramm in Matlab to plot the same data. They look very much the same as plots produced by this R file.]
INPUT:
OUTPUT:
Additional Scripts Used: requires that FixationRate_BarGraphsByLeague.m was run in MATLAB. Or that its output is available in the ../data folder (EyeTrackFixRate.csv, SC2FixRate.csv)
"
require('psych')
require('reshape')
require('lsr')
require('ez')
require('ggplot2')
# move to this directory, and use it as a reference point to find the data folder
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
setwd('../data/') # move up and into data folder
#################### StarCraft2 data ####################
SCFixRate = read.table('SC2FixRate.csv', header = FALSE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
# Specify that the League Column is a Factor
SCFixRate$leagueID = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
fixRateImg = ggplot(SCFixRate, aes(SCFixRate$leagueID,fixRate))
fixRateImg = fixRateImg + geom_jitter(height = 0, width = 0.2, alpha = .1)
fixRateImg = fixRateImg + theme_bw() + theme(text = element_text(size=25), panel.grid.major = element_blank(), plot.title = element_text(size=25))
fixRateImg = fixRateImg + geom_violin(alpha = .15, fill = "#C0C0C0", colour = "#C0C0C0")
fixRateImg = fixRateImg + labs(x = "League")
fixRateImg = fixRateImg + labs(y = "PAC/Fixation Rate") # changed this label from "PAC, Fixation Rate..." -KD
fixRateImg = fixRateImg + ggtitle('PAC/Fixation Rate by League') # changed from "PAC + Fixation Rate" -KD
ggsave('../figures/SCFixRateImg.pdf', width = 7, height = 5, units = c("in"))
kresult=kruskal.test(SCFixRate$fixRate~SCFixRate$leagueID)
diffBetwenSilverAndMaster = wilcox.test(SCFixRate$fixRate[SCFixRate$leagueID == 2],SCFixRate$fixRate[SCFixRate$leagueID == 6])
# get effect size, as per TOMCZAK & TOMCZAK (2014) http://www.tss.awf.poznan.pl/files/3_Trends_Vol21_2014__no1_20.pdf
H = kresult$statistic
k = kresult$parameter + 1
n = length(unique(SCFixRate$gameIDRecord));
etaSq = (H - k + 1)/(n-k)
# 2b. Determine the difference between the "novice-ish" and the "expert-ish" toward the opposite end of the possible league
diffBetwenSilverAndMaster = wilcox.test(SCFixRate$fixRate[SCFixRate$leagueID == 2],SCFixRate$fixRate[SCFixRate$leagueID == 6])
effSizeR = sqrt(diffBetwenSilverAndMaster$statistic)/(length(unique(SCFixRate$gameIDRecord[SCFixRate$leagueID == 2])) + length(unique(SCFixRate$gameIDRecord[SCFixRate$league==6])))
# 3. mark's idea to look at bronze vs. subsequent leagues; based on pairwise test from fixRateAnalysis.R. Helpful for more typical learning curve distributions too.
# note: we use a family-wise error correction of .05/6 = 0.008 to reject the null hypothesis that the two samples are drawn from the same population.
bronzeVsLater = data.frame()
for (leagueNum in 2:7){
# t-test
pairCompare = t.test(SCFixRate$fixRate[SCFixRate$leagueID == 1],SCFixRate$fixRate[SCFixRate$leagueID == leagueNum])
bronzeVsLater[leagueNum-1,1]=pairCompare$statistic
bronzeVsLater[leagueNum-1,2]=pairCompare$parameter
bronzeVsLater[leagueNum-1,3]=pairCompare$p.value
# effect size
bronzeVsLater[leagueNum-1,4] = cohensD(SCFixRate$fixRate[SCFixRate$leagueID == 1],SCFixRate$fixRate[SCFixRate$leagueID == leagueNum])
}
#################### EyeTracking data ####################
ETFixRate = read.table('EyeTrackFixRate.csv', header = TRUE, sep = ",")
names(ETFixRate) <- c("participantID", "fixRateFirst2", "fixRateLast2")
# the formatting is different for the eye tracking data. reshape it so it's long format.
ETFixRateLong <- melt(ETFixRate, id=c("participantID"))
names(ETFixRateLong) <- c("participantID", "whichTrials", "fixationRate")
ETFixRateImg = ggplot(ETFixRateLong, aes(ETFixRateLong$whichTrials,ETFixRateLong$fixationRate))
ETFixRateImg = ETFixRateImg + geom_jitter(height = 0, width = 0.2, alpha = .1)
ETFixRateImg = ETFixRateImg + theme_bw() + theme(text = element_text(size=25), panel.grid.major = element_blank(), plot.title = element_text(size=25))
ETFixRateImg = ETFixRateImg + geom_violin(alpha = .15, fill = "#C0C0C0", colour = "#C0C0C0")
ETFixRateImg = ETFixRateImg + labs(x = "Temporal Range (mins)")
ETFixRateImg = ETFixRateImg + labs(y = "Fixation Rate")
ETFixRateImg = ETFixRateImg + ggtitle('Eye Fixation Rate: First, Last Minutes')
ETFixRateImg = ETFixRateImg + scale_x_discrete(labels=c("fixRateFirst2" = "First 2", "fixRateLast2" = "Last 2"))
ggsave('../figures/ETFixRateImg.pdf', width = 7, height = 5, units = c("in"))
kresultET = kruskal.test(ETFixRateLong$fixationRate~ETFixRateLong$whichTrials)
diffBetwenFirstAndLastET = wilcox.test(ETFixRateLong$fixationRate[ETFixRateLong$whichTrials == "fixRateFirst2"], ETFixRateLong$fixationRate[ETFixRateLong$whichTrials == "fixRateLast2"])
effSizeR = sqrt(diffBetwenFirstAndLastET$statistic)/length(unique(ETFixRateLong$participantID))*2
# get effect size, as per TOMCZAK & TOMCZAK (2014) http://www.tss.awf.poznan.pl/files/3_Trends_Vol21_2014__no1_20.pdf
HET = kresultET$statistic
kET = kresultET$parameter + 1
nET = length(unique(ETFixRateLong$participantID));
etaSqET = (HET - kET + 1)/(nET-kET)
## in response to reviewer request, a histogram of the number of observations that went into analysis.
# reviewed: [Robin]
# verified: []
ggplot(data = SCFixRate) + geom_histogram(aes(x = SCFixRate$leagueID), stat="count") + labs(title = "Number of Observations in Analysis: StarCraft II Fixation Rate") +
labs(x="League", y="Count")
ggsave('../figures/SCFixRateHist.pdf', width = 7, height = 5, units = c("in"))
### Bootstrap Tukey
# reviewed by Caitlyn [Jun 19 2019]
set.seed(1) # to make sampling reproducible
library(dplyr)
ToRemove=which(SCFixRate$leagueID=='7')
ultraTabViable=SCFixRate[-ToRemove,]
ultraTabViable$leagueID=droplevels(ultraTabViable$leagueID)
open droplevels
open (droplevels)
open(droplevels)
#set number of samples
Replications=50
#initialize
output=matrix(, nrow = 15, ncol = Replications)
for (i in 1:Replications){
#subsample
new_data <- ultraTabViable %>% group_by(leagueID) %>% sample_n(167, replace=FALSE)
#aov and tukey
Anova=aov(new_data$fixRate~new_data$leagueID)
TUKEY=TukeyHSD(Anova)$`new_data$leagueID`[,4]
#record pvalues
output[1:length(TUKEY),i]=TUKEY
}
#mean pvalues, and produce output
RowMEANZ=rowMeans(output)
FinalOutput=data.frame(as.factor(row.names(TukeyHSD(Anova)$`new_data$leagueID`)),RowMEANZ)
names(FinalOutput)=c('Comparison','Mean PValue')
FinalOutput
# author: Joe Thompson
# June 2019
# edited by Caitlyn McColeman to include PAC variables
# originally for DigitEyes, July 2019 submission
# Review: Jordan
# - Adding document outline headers
# - note: Basically 4 components: script, TukeyFoundationANOVA function, dataload from skilldependence Master Table, and data load for variables with their own csvs.
# - added "ordered = True" to Tukey test call
# - Note that "nSmallest" changes slightly based on data source
# - suggest including BANOVA support from Jasp for each measure:
#    - Pros: visuals, robust to distributional assumption violations and sample size differences between groups.
#    - Cons: No ability to order League for post-hoc test, and not exactly what was asked for.
#
#   Review action items: Joe
#
# Verified: TBD (Robin)
# FIRST: ensure directory is the same structure as https://github.com/SFU-Cognitive-Science-Lab/DigitEyes, with a subfolder for each of data, analyses and figures
## PAC variables
data = read.csv("../data/skilldependencemastertable_final.csv", header = TRUE, sep = ",")
data$leagueidx=as.factor(data$leagueidx)
### Bootstrap Tukey
#should = 167 for the skilldependencemastertable
nSmallest = min(summary(data$leagueidx))
set.seed(1) # to make sampling reproducible
library(dplyr)
#set number of samples
Replications=50
#initialize, choose(6,2) = 15 rows
output=matrix(, nrow = 15, ncol = Replications)
TukeyFoundationANOVA=function(data, colNum, nSmallestGroup){
for (i in 1:Replications){
#subsample
new_data <- data %>% group_by(leagueidx) %>% sample_n(nSmallestGroup, replace=FALSE)
new_data=data.frame(new_data)
#aov and tukey
Anova=aov(new_data[,colNum]~new_data$leagueidx)
TUKEY=TukeyHSD(Anova,ordered = TRUE)$`new_data$leagueidx`[,4]
#TUKEY=TukeyHSD(Anova)$`new_data$leagueidx`[,4]
#record pvalues
output[1:length(TUKEY),i]=TUKEY
#### Debug Code: Comment out all of this to run this script for real ####
#unequalvariancetest=bartlett.test(new_data[,colNum]~new_data$leagueidx)
#boxplot(new_data[,colNum]~new_data$leagueidx, main=unequalvariancetest)
#readline(prompt="Joe's Dirty Debugger Activated [enter] to continue [esc] to abord")
#### Debug Code part 2: Use this to run TukeyFoundationANOVA outside of a function for PACDur ####
#new_data=data
#colNum=1
#nSmallestGroup=100
}
#mean pvalues, and produce output
RowMEANZ=rowMeans(output)
FinalOutput=data.frame(as.factor(row.names(TukeyHSD(Anova)$`new_data$leagueidx`)),RowMEANZ, RowMEANZ<0.05)
names(FinalOutput)=c('Comparison','Mean PValue', 'significant')
FinalOutput
}
skilldependencemastertable_final <- read.csv("C:/Users/rb_ja/OneDrive/Desktop/skilldependencemastertable_final.csv")
View(skilldependencemastertable_final)
data = skilldependencemastertable_final
data$leagueidx=as.factor(data$leagueidx)
### Bootstrap Tukey
#should = 167 for the skilldependencemastertable
nSmallest = min(summary(data$leagueidx))
set.seed(1) # to make sampling reproducible
library(dplyr)
#set number of samples
Replications=50
#initialize, choose(6,2) = 15 rows
output=matrix(, nrow = 15, ncol = Replications)
TukeyFoundationANOVA=function(data, colNum, nSmallestGroup){
for (i in 1:Replications){
#subsample
new_data <- data %>% group_by(leagueidx) %>% sample_n(nSmallestGroup, replace=FALSE)
new_data=data.frame(new_data)
#aov and tukey
Anova=aov(new_data[,colNum]~new_data$leagueidx)
TUKEY=TukeyHSD(Anova,ordered = TRUE)$`new_data$leagueidx`[,4]
#TUKEY=TukeyHSD(Anova)$`new_data$leagueidx`[,4]
#record pvalues
output[1:length(TUKEY),i]=TUKEY
#### Debug Code: Comment out all of this to run this script for real ####
#unequalvariancetest=bartlett.test(new_data[,colNum]~new_data$leagueidx)
#boxplot(new_data[,colNum]~new_data$leagueidx, main=unequalvariancetest)
#readline(prompt="Joe's Dirty Debugger Activated [enter] to continue [esc] to abord")
#### Debug Code part 2: Use this to run TukeyFoundationANOVA outside of a function for PACDur ####
#new_data=data
#colNum=1
#nSmallestGroup=100
}
#mean pvalues, and produce output
RowMEANZ=rowMeans(output)
FinalOutput=data.frame(as.factor(row.names(TukeyHSD(Anova)$`new_data$leagueidx`)),RowMEANZ, RowMEANZ<0.05)
names(FinalOutput)=c('Comparison','Mean PValue', 'significant')
FinalOutput
}
#4) between fixation amplitude
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
View(fixRatePostHoc)
#4) between fixation amplitude
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
#4) between fixation amplitude
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
#4) between fixation amplitude
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
#4) between fixation amplitude
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
#4) between fixation amplitude
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
#4) between fixation amplitude
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
#4) between fixation amplitude
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
#get fixrate data
SCFixRate = read.table('../data/SC2FixRate.csv', header = TRUE, sep = ",")
names(SCFixRate) = c("leagueID", "fixRate")
#drop gm
SCFixRate=SCFixRate[SCFixRate$leagueID<7,]
# Specify that the League Column is a Factor
SCFixRate$leagueidx = factor(SCFixRate$leagueID)
# Add an Indexing variable
gameIDRecord = 1:length(SCFixRate$leagueID)
SCFixRate = cbind(gameIDRecord, SCFixRate)
grpSize = aggregate(fixRate ~ leagueidx, data = SCFixRate, FUN = length) # check counts
nSmallest = min(grpSize$fixRate)
fixRatePostHoc = TukeyFoundationANOVA(SCFixRate,3,nSmallest)
#### RCAB: First iteration doesnt look anything like following iterations for this measure. variability does not seem representative of dataset
write.table(fixRatePostHoc, file = "AmplitudeTukey", sep = "\t")
summary(output)
